/* tslint:disable */
/* eslint-disable */
/**
 * API Specification
 * クライアント-サーバー間のデータ通信仕様
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionType,
    InspectionTypeFromJSON,
    InspectionTypeToJSON,
} from '../models';

export interface InspectionTypesIdDeleteRequest {
    id: number;
}

export interface InspectionTypesIdGetRequest {
    id: number;
}

export interface InspectionTypesIdPutRequest {
    id: number;
    inspectionType?: InspectionType;
}

export interface InspectionTypesPostRequest {
    inspectionType?: InspectionType;
}

/**
 * 
 */
export class InspectionTypesApi extends runtime.BaseAPI {

    /**
     * Get all inspection types.
     */
    async inspectionTypesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InspectionType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTypeFromJSON));
    }

    /**
     * Get all inspection types.
     */
    async inspectionTypesGet(initOverrides?: RequestInit): Promise<Array<InspectionType>> {
        const response = await this.inspectionTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes the InspectionType model.
     */
    async inspectionTypesIdDeleteRaw(requestParameters: InspectionTypesIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inspectionTypesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Deletes the InspectionType model.
     */
    async inspectionTypesIdDelete(requestParameters: InspectionTypesIdDeleteRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.inspectionTypesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get InspectionType model by ID.
     */
    async inspectionTypesIdGetRaw(requestParameters: InspectionTypesIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inspectionTypesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Get InspectionType model by ID.
     */
    async inspectionTypesIdGet(requestParameters: InspectionTypesIdGetRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.inspectionTypesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the InspectionType model.
     */
    async inspectionTypesIdPutRaw(requestParameters: InspectionTypesIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inspectionTypesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionTypeToJSON(requestParameters.inspectionType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Updates the InspectionType model.
     */
    async inspectionTypesIdPut(requestParameters: InspectionTypesIdPutRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.inspectionTypesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new InspectionType model
     */
    async inspectionTypesPostRaw(requestParameters: InspectionTypesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionTypeToJSON(requestParameters.inspectionType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * Create a new InspectionType model
     */
    async inspectionTypesPost(requestParameters: InspectionTypesPostRequest = {}, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.inspectionTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
