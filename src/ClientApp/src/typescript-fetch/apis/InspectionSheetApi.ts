/* tslint:disable */
/* eslint-disable */
/**
 * Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionSheet,
    InspectionSheetFromJSON,
    InspectionSheetToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiV1InspectionSheetsIdDeleteRequest {
    id: number;
}

export interface ApiV1InspectionSheetsIdGetRequest {
    id: number;
}

export interface ApiV1InspectionSheetsIdPutRequest {
    id: number;
    inspectionSheet: InspectionSheet;
}

export interface ApiV1InspectionSheetsPostRequest {
    inspectionSheet: InspectionSheet;
}

/**
 * 
 */
export class InspectionSheetApi extends runtime.BaseAPI {

    /**
     * 点検シートの一覧を取得する
     */
    async apiV1InspectionSheetsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InspectionSheet>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-sheets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionSheetFromJSON));
    }

    /**
     * 点検シートの一覧を取得する
     */
    async apiV1InspectionSheetsGet(initOverrides?: RequestInit): Promise<Array<InspectionSheet>> {
        const response = await this.apiV1InspectionSheetsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検シートを削除する
     */
    async apiV1InspectionSheetsIdDeleteRaw(requestParameters: ApiV1InspectionSheetsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionSheetsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-sheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定の点検シートを削除する
     */
    async apiV1InspectionSheetsIdDelete(requestParameters: ApiV1InspectionSheetsIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1InspectionSheetsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1InspectionSheetsIdGetRaw(requestParameters: ApiV1InspectionSheetsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionSheet>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionSheetsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-sheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionSheetFromJSON(jsonValue));
    }

    /**
     */
    async apiV1InspectionSheetsIdGet(requestParameters: ApiV1InspectionSheetsIdGetRequest, initOverrides?: RequestInit): Promise<InspectionSheet> {
        const response = await this.apiV1InspectionSheetsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検シートを更新する
     */
    async apiV1InspectionSheetsIdPutRaw(requestParameters: ApiV1InspectionSheetsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionSheet>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionSheetsIdPut.');
        }

        if (requestParameters.inspectionSheet === null || requestParameters.inspectionSheet === undefined) {
            throw new runtime.RequiredError('inspectionSheet','Required parameter requestParameters.inspectionSheet was null or undefined when calling apiV1InspectionSheetsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inspection-sheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionSheetToJSON(requestParameters.inspectionSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionSheetFromJSON(jsonValue));
    }

    /**
     * 指定の点検シートを更新する
     */
    async apiV1InspectionSheetsIdPut(requestParameters: ApiV1InspectionSheetsIdPutRequest, initOverrides?: RequestInit): Promise<InspectionSheet> {
        const response = await this.apiV1InspectionSheetsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 点検シートを作成する
     */
    async apiV1InspectionSheetsPostRaw(requestParameters: ApiV1InspectionSheetsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionSheet>> {
        if (requestParameters.inspectionSheet === null || requestParameters.inspectionSheet === undefined) {
            throw new runtime.RequiredError('inspectionSheet','Required parameter requestParameters.inspectionSheet was null or undefined when calling apiV1InspectionSheetsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inspection-sheets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionSheetToJSON(requestParameters.inspectionSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionSheetFromJSON(jsonValue));
    }

    /**
     * 点検シートを作成する
     */
    async apiV1InspectionSheetsPost(requestParameters: ApiV1InspectionSheetsPostRequest, initOverrides?: RequestInit): Promise<InspectionSheet> {
        const response = await this.apiV1InspectionSheetsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
