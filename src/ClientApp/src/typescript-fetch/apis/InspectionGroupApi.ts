/* tslint:disable */
/* eslint-disable */
/**
 * Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionGroup,
    InspectionGroupFromJSON,
    InspectionGroupToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiV1InspectionGroupsIdDeleteRequest {
    id: number;
}

export interface ApiV1InspectionGroupsIdGetRequest {
    id: number;
}

export interface ApiV1InspectionGroupsIdPutRequest {
    id: number;
    inspectionGroup: InspectionGroup;
}

export interface ApiV1InspectionGroupsPostRequest {
    inspectionGroup: InspectionGroup;
}

/**
 * 
 */
export class InspectionGroupApi extends runtime.BaseAPI {

    /**
     * 点検グループの一覧を取得する
     */
    async apiV1InspectionGroupsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InspectionGroup>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionGroupFromJSON));
    }

    /**
     * 点検グループの一覧を取得する
     */
    async apiV1InspectionGroupsGet(initOverrides?: RequestInit): Promise<Array<InspectionGroup>> {
        const response = await this.apiV1InspectionGroupsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検グループを削除する
     */
    async apiV1InspectionGroupsIdDeleteRaw(requestParameters: ApiV1InspectionGroupsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionGroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionGroupsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * 指定の点検グループを削除する
     */
    async apiV1InspectionGroupsIdDelete(requestParameters: ApiV1InspectionGroupsIdDeleteRequest, initOverrides?: RequestInit): Promise<InspectionGroup> {
        const response = await this.apiV1InspectionGroupsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検グループを取得する
     */
    async apiV1InspectionGroupsIdGetRaw(requestParameters: ApiV1InspectionGroupsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionGroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionGroupsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * 指定の点検グループを取得する
     */
    async apiV1InspectionGroupsIdGet(requestParameters: ApiV1InspectionGroupsIdGetRequest, initOverrides?: RequestInit): Promise<InspectionGroup> {
        const response = await this.apiV1InspectionGroupsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検グループを更新する
     */
    async apiV1InspectionGroupsIdPutRaw(requestParameters: ApiV1InspectionGroupsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionGroup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionGroupsIdPut.');
        }

        if (requestParameters.inspectionGroup === null || requestParameters.inspectionGroup === undefined) {
            throw new runtime.RequiredError('inspectionGroup','Required parameter requestParameters.inspectionGroup was null or undefined when calling apiV1InspectionGroupsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inspection-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionGroupToJSON(requestParameters.inspectionGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * 指定の点検グループを更新する
     */
    async apiV1InspectionGroupsIdPut(requestParameters: ApiV1InspectionGroupsIdPutRequest, initOverrides?: RequestInit): Promise<InspectionGroup> {
        const response = await this.apiV1InspectionGroupsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 点検グループを作成する
     */
    async apiV1InspectionGroupsPostRaw(requestParameters: ApiV1InspectionGroupsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionGroup>> {
        if (requestParameters.inspectionGroup === null || requestParameters.inspectionGroup === undefined) {
            throw new runtime.RequiredError('inspectionGroup','Required parameter requestParameters.inspectionGroup was null or undefined when calling apiV1InspectionGroupsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inspection-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionGroupToJSON(requestParameters.inspectionGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionGroupFromJSON(jsonValue));
    }

    /**
     * 点検グループを作成する
     */
    async apiV1InspectionGroupsPost(requestParameters: ApiV1InspectionGroupsPostRequest, initOverrides?: RequestInit): Promise<InspectionGroup> {
        const response = await this.apiV1InspectionGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
