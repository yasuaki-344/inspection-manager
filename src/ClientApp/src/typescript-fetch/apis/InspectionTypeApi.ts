/* tslint:disable */
/* eslint-disable */
/**
 * Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionType,
    InspectionTypeFromJSON,
    InspectionTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiV1InspectionTypesIdDeleteRequest {
    id: number;
}

export interface ApiV1InspectionTypesIdGetRequest {
    id: number;
}

export interface ApiV1InspectionTypesIdPutRequest {
    id: number;
    inspectionType: InspectionType;
}

export interface ApiV1InspectionTypesPostRequest {
    inspectionType: InspectionType;
}

/**
 * 
 */
export class InspectionTypeApi extends runtime.BaseAPI {

    /**
     * 点検種別の一覧を取得する
     */
    async apiV1InspectionTypesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InspectionType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTypeFromJSON));
    }

    /**
     * 点検種別の一覧を取得する
     */
    async apiV1InspectionTypesGet(initOverrides?: RequestInit): Promise<Array<InspectionType>> {
        const response = await this.apiV1InspectionTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検種別を削除する
     */
    async apiV1InspectionTypesIdDeleteRaw(requestParameters: ApiV1InspectionTypesIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionTypesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * 指定の点検種別を削除する
     */
    async apiV1InspectionTypesIdDelete(requestParameters: ApiV1InspectionTypesIdDeleteRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.apiV1InspectionTypesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検種別を取得する
     */
    async apiV1InspectionTypesIdGetRaw(requestParameters: ApiV1InspectionTypesIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionTypesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/inspection-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * 指定の点検種別を取得する
     */
    async apiV1InspectionTypesIdGet(requestParameters: ApiV1InspectionTypesIdGetRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.apiV1InspectionTypesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検種別を更新する
     */
    async apiV1InspectionTypesIdPutRaw(requestParameters: ApiV1InspectionTypesIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1InspectionTypesIdPut.');
        }

        if (requestParameters.inspectionType === null || requestParameters.inspectionType === undefined) {
            throw new runtime.RequiredError('inspectionType','Required parameter requestParameters.inspectionType was null or undefined when calling apiV1InspectionTypesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inspection-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionTypeToJSON(requestParameters.inspectionType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * 指定の点検種別を更新する
     */
    async apiV1InspectionTypesIdPut(requestParameters: ApiV1InspectionTypesIdPutRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.apiV1InspectionTypesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 点検種別を作成する
     */
    async apiV1InspectionTypesPostRaw(requestParameters: ApiV1InspectionTypesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionType>> {
        if (requestParameters.inspectionType === null || requestParameters.inspectionType === undefined) {
            throw new runtime.RequiredError('inspectionType','Required parameter requestParameters.inspectionType was null or undefined when calling apiV1InspectionTypesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/inspection-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionTypeToJSON(requestParameters.inspectionType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionTypeFromJSON(jsonValue));
    }

    /**
     * 点検種別を作成する
     */
    async apiV1InspectionTypesPost(requestParameters: ApiV1InspectionTypesPostRequest, initOverrides?: RequestInit): Promise<InspectionType> {
        const response = await this.apiV1InspectionTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
