/* tslint:disable */
/* eslint-disable */
/**
 * Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChoiceTemplate,
    ChoiceTemplateFromJSON,
    ChoiceTemplateToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiV1ChoiceTemplatesIdDeleteRequest {
    id: number;
}

export interface ApiV1ChoiceTemplatesIdGetRequest {
    id: number;
}

export interface ApiV1ChoiceTemplatesIdPutRequest {
    id: number;
    choiceTemplate: ChoiceTemplate;
}

export interface ApiV1ChoiceTemplatesPostRequest {
    choiceTemplate: ChoiceTemplate;
}

/**
 * 
 */
export class ChoiceTemplateApi extends runtime.BaseAPI {

    /**
     * 点検種別の一覧を取得する
     */
    async apiV1ChoiceTemplatesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ChoiceTemplate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/choice-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChoiceTemplateFromJSON));
    }

    /**
     * 点検種別の一覧を取得する
     */
    async apiV1ChoiceTemplatesGet(initOverrides?: RequestInit): Promise<Array<ChoiceTemplate>> {
        const response = await this.apiV1ChoiceTemplatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検種別を削除する
     */
    async apiV1ChoiceTemplatesIdDeleteRaw(requestParameters: ApiV1ChoiceTemplatesIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ChoiceTemplate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ChoiceTemplatesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/choice-templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceTemplateFromJSON(jsonValue));
    }

    /**
     * 指定の点検種別を削除する
     */
    async apiV1ChoiceTemplatesIdDelete(requestParameters: ApiV1ChoiceTemplatesIdDeleteRequest, initOverrides?: RequestInit): Promise<ChoiceTemplate> {
        const response = await this.apiV1ChoiceTemplatesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検種別を取得する
     */
    async apiV1ChoiceTemplatesIdGetRaw(requestParameters: ApiV1ChoiceTemplatesIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ChoiceTemplate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ChoiceTemplatesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/choice-templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceTemplateFromJSON(jsonValue));
    }

    /**
     * 指定の点検種別を取得する
     */
    async apiV1ChoiceTemplatesIdGet(requestParameters: ApiV1ChoiceTemplatesIdGetRequest, initOverrides?: RequestInit): Promise<ChoiceTemplate> {
        const response = await this.apiV1ChoiceTemplatesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の点検種別を更新する
     */
    async apiV1ChoiceTemplatesIdPutRaw(requestParameters: ApiV1ChoiceTemplatesIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ChoiceTemplate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ChoiceTemplatesIdPut.');
        }

        if (requestParameters.choiceTemplate === null || requestParameters.choiceTemplate === undefined) {
            throw new runtime.RequiredError('choiceTemplate','Required parameter requestParameters.choiceTemplate was null or undefined when calling apiV1ChoiceTemplatesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/choice-templates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChoiceTemplateToJSON(requestParameters.choiceTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceTemplateFromJSON(jsonValue));
    }

    /**
     * 指定の点検種別を更新する
     */
    async apiV1ChoiceTemplatesIdPut(requestParameters: ApiV1ChoiceTemplatesIdPutRequest, initOverrides?: RequestInit): Promise<ChoiceTemplate> {
        const response = await this.apiV1ChoiceTemplatesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 点検種別を作成する
     */
    async apiV1ChoiceTemplatesPostRaw(requestParameters: ApiV1ChoiceTemplatesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ChoiceTemplate>> {
        if (requestParameters.choiceTemplate === null || requestParameters.choiceTemplate === undefined) {
            throw new runtime.RequiredError('choiceTemplate','Required parameter requestParameters.choiceTemplate was null or undefined when calling apiV1ChoiceTemplatesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/choice-templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChoiceTemplateToJSON(requestParameters.choiceTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChoiceTemplateFromJSON(jsonValue));
    }

    /**
     * 点検種別を作成する
     */
    async apiV1ChoiceTemplatesPost(requestParameters: ApiV1ChoiceTemplatesPostRequest, initOverrides?: RequestInit): Promise<ChoiceTemplate> {
        const response = await this.apiV1ChoiceTemplatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
