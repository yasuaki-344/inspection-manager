/* tslint:disable */
/* eslint-disable */
/**
 * Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InspectionSheet,
    InspectionSheetFromJSON,
    InspectionSheetToJSON,
} from '../models';

export interface InspectionSheetsPostRequest {
    inspectionSheet?: InspectionSheet;
}

export interface InspectionSheetsSheetIdDeleteRequest {
    sheetId: number;
}

export interface InspectionSheetsSheetIdGetRequest {
    sheetId: number;
}

export interface InspectionSheetsSheetIdPutRequest {
    sheetId: number;
    inspectionSheet?: InspectionSheet;
}

/**
 * 
 */
export class InspectionSheetsApi extends runtime.BaseAPI {

    /**
     * Get all inspection sheets.
     */
    async inspectionSheetsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InspectionSheet>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-sheets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionSheetFromJSON));
    }

    /**
     * Get all inspection sheets.
     */
    async inspectionSheetsGet(initOverrides?: RequestInit): Promise<Array<InspectionSheet>> {
        const response = await this.inspectionSheetsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new InspectionSheet model
     */
    async inspectionSheetsPostRaw(requestParameters: InspectionSheetsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionSheet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-sheets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionSheetToJSON(requestParameters.inspectionSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionSheetFromJSON(jsonValue));
    }

    /**
     * Create a new InspectionSheet model
     */
    async inspectionSheetsPost(requestParameters: InspectionSheetsPostRequest = {}, initOverrides?: RequestInit): Promise<InspectionSheet> {
        const response = await this.inspectionSheetsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the InspectionSheet model.
     */
    async inspectionSheetsSheetIdDeleteRaw(requestParameters: InspectionSheetsSheetIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sheetId === null || requestParameters.sheetId === undefined) {
            throw new runtime.RequiredError('sheetId','Required parameter requestParameters.sheetId was null or undefined when calling inspectionSheetsSheetIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-sheets/{sheet_id}`.replace(`{${"sheet_id"}}`, encodeURIComponent(String(requestParameters.sheetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the InspectionSheet model.
     */
    async inspectionSheetsSheetIdDelete(requestParameters: InspectionSheetsSheetIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.inspectionSheetsSheetIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the specified inspection sheet.
     */
    async inspectionSheetsSheetIdGetRaw(requestParameters: InspectionSheetsSheetIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionSheet>> {
        if (requestParameters.sheetId === null || requestParameters.sheetId === undefined) {
            throw new runtime.RequiredError('sheetId','Required parameter requestParameters.sheetId was null or undefined when calling inspectionSheetsSheetIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspection-sheets/{sheet_id}`.replace(`{${"sheet_id"}}`, encodeURIComponent(String(requestParameters.sheetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionSheetFromJSON(jsonValue));
    }

    /**
     * Get the specified inspection sheet.
     */
    async inspectionSheetsSheetIdGet(requestParameters: InspectionSheetsSheetIdGetRequest, initOverrides?: RequestInit): Promise<InspectionSheet> {
        const response = await this.inspectionSheetsSheetIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the InspectionSheet model.
     */
    async inspectionSheetsSheetIdPutRaw(requestParameters: InspectionSheetsSheetIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InspectionSheet>> {
        if (requestParameters.sheetId === null || requestParameters.sheetId === undefined) {
            throw new runtime.RequiredError('sheetId','Required parameter requestParameters.sheetId was null or undefined when calling inspectionSheetsSheetIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inspection-sheets/{sheet_id}`.replace(`{${"sheet_id"}}`, encodeURIComponent(String(requestParameters.sheetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InspectionSheetToJSON(requestParameters.inspectionSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectionSheetFromJSON(jsonValue));
    }

    /**
     * Updates the InspectionSheet model.
     */
    async inspectionSheetsSheetIdPut(requestParameters: InspectionSheetsSheetIdPutRequest, initOverrides?: RequestInit): Promise<InspectionSheet> {
        const response = await this.inspectionSheetsSheetIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
